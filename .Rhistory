library(dplyr)
pak::pak("tidyverse/dplyr")
install.packages('pak')
library(dplyr)
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(ComplexHeatmap)
discrete_mat = matrix(sample(letters[1:4], 100, replace = TRUE), 5, 5)
View(discrete_mat)
colors = structure(1:4, names = letters[1:4])
colors
?letters
letters
discrete_mat
#Viral inc and dec for treemap
#Avian influenza
#Li et al 2018
AIi_1 <- c("Proteobacteria", "Enterobacteriaceae", "Escherichia", "Clostridium", "Veillonella")
AId_1 <- c("Bacteroides","Enterococcus","Firmicutes",
"Lactobacillus","Parabacteroides","SMB52","Streptococcus")
AIi_2 <- c("Anaerosporobacter", "Anaerotruncus","Bdellovibrionales",
"Carnobacteriaceae", "Clostridium XIVb", "Coprococcus",
"Deltaproteobacteria", "Isobaculum", "Negativicutes",
"Proteobacteria","Ruminococcus", "Vampirovibrio")
AId_2 <- c("Sphingomonales", "Sphingomonadaceae")
#Zhang et al 2020
AIi_3 <- c("Escherichia","Proteobacteria")
AId_3 <- c("Lactobacillus")
#Newcastle disease
#Cui et al (2018)
NDi_1 <- c("Sinobacteraceae", "Rhodoplanes")
NDd_1 <- c("Chitinophagaceae", "Cytophagaceae", "Bacteroidales",
"Xanthomonadaceae", "SC-I-84",
"Gemm-1", "Saprospiraceae", "Ignavibacteriaceae",
"Rhizobiales", "Sphingobacteriales", "Ellin6067", "Acidimicrobiales",
"Clostridium","Pseudomonas","Serratia")
#Tong et al (2018)
NDi_2 <- c("Proteobacteria","Escherichia")
NDd_2 <- c("Firmicutes", "Lactobacillus", "Enterococcus")
#PDCov
#Li et al (2020)
PCi <- c("Bacteroidetes", "Rikenellaceae", "Alistipes", "Unclassified Ruminococcaceae")
PCd <- c("Firmicutes","Eisenbergiella", "Anaerotruncus", "Ruminococcaceae UCG 014")
vinc <- c(AIi_1, AIi_2, AIi_3, NDi_1, NDi_2, PCi)
intersect(vinc)
intersect(intersect(AIi_1, AIi_2),AIi_3)
reduce(intersect, vinc)
Reduce(intersect, vinc)
vdec <- c(AId_1, AId_2, AId_3, NDd_1, NDd_2, PCd)
Reduce(intersect, vdec)
table(vinc)
table(vdec)
AIi <- c(AIi_1, AIi_2, AIi_3)
reduce(intersect, AIi)
AIi <- c(AIi_1, AIi_2, AIi_3)
Reduce(intersect, AIi)
AIi <- c(AIi_1, AIi_2, AIi_3)
AId <- c(AId_1,AId_2, AId_3)
Reduce(intersect, AIi)
Reduce(intersect,AId)
Reduce(intersect, AId)
intersect(intersect(AId_1,AId_2), AId_3)
intersect(AId_1,AId_2)
?intersect
table(AIi)
table(AId)
intersect(NDi_1, NDi_2)
Dd_2 <- c("Proteobacteria","Escherichia")
NDd_2 <- c("Firmicutes", "Lactobacillus", "Enterococcus")
AIi_3 <- c("Escherichia","Proteobacteria")
AId_3 <- c("Lactobacillus")
table(AIi)
table(AId)
#Li et al 2018
AIi_1 <- c("Proteobacteria", "Enterobacteriaceae", "Escherichia", "Clostridium", "Veillonella")
AId_1 <- c("Bacteroides","Enterococcus","Firmicutes",
"Lactobacillus","Parabacteroides","SMB52","Streptococcus")
#Yitbarek et al 2018
AIi_2 <- c("Anaerosporobacter", "Anaerotruncus","Bdellovibrionales",
"Carnobacteriaceae", "Clostridium XIVb", "Coprococcus",
"Deltaproteobacteria", "Isobaculum", "Negativicutes",
"Proteobacteria","Ruminococcus", "Vampirovibrio")
AId_2 <- c("Sphingomonales", "Sphingomonadaceae")
AIi <- c(AIi_1, AIi_2, AIi_3)
AId <- c(AId_1,AId_2, AId_3)
table(AIi)
table(AId)
NDd_1 <- c("Proteobacteria","Escherichia")
NDd_2 <- c("Firmicutes", "Lactobacillus", "Enterococcus")
NDi <- c(NDi_1, NDi_2)
ND2 <- c(NDd_1, NDd_2)
NDi <- c(NDi_1, NDi_2)
NDd <- c(NDd_1, NDd_2)
table(NDi)
table(NDd)
vinc <- c(AIi_1, AIi_2, AIi_3, NDi_1, NDi_2, PCi)
vdec <- c(AId_1, AId_2, AId_3, NDd_1, NDd_2, PCd)
table(vinc)
table(vinc)
table(vdec)
citation()
janetal <- ("Clostridia", "Clostridiales", "Eubacterium coprostanoligenes", "Lacrimispora",
janetal <- ("Clostridia", "Clostridiales", "Eubacterium coprostanoligenes", "Lacrimispora",
lietal <- ("Acinetobacter", "Clostridia", "Clostridiales", "Cutibacterium", "Cutibacterium acnes",
janetal <- c("Clostridia","Clostridiales", "Eubacterium coprostanoligenes", "Lacrimispora",
"Lacrimispora saccharolytica", "Mediterraneibacter", "Mediterraneibacter glycyrrhinizinilyticus",
"Oscillospiraceae", "Oscillabacter", "Oscillibacter valerigenes", "Roseburia")
lietal <- c("Acinetobacter", "Clostridia", "Clostridiales", "Cutibacterium", "Cutibacterium acnes","Moraxellaceae", "Pseudomonadales", "Rhizobiales", "Propionibacteriales", "Propionibacteriaceae",
"unidentified Prevotellaceae", "Prevotella sp 109")
table(janetal,lietal)
selefse <- c(janetal,lietal)
table(selefse)
janetal <- c("Clostridia","Clostridiales", "Eubacterium coprostanoligenes", "Lacrimispora",
"Lacrimispora saccharolytica", "Mediterraneibacter", "Mediterraneibacter glycyrrhinizinilyticus",
"Oscillospiraceae", "Oscillabacter", "Oscillibacter valerigenes", "Roseburia")
lietal <- c("Acinetobacter", "Clostridia", "Clostridiales", "Cutibacterium", "Cutibacterium acnes",
"Moraxellaceae", "Pseudomonadales", "Rhizobiales", "Propionibacteriales", "Propionibacteriaceae",
"unidentified Prevotellaceae", "Prevotella sp 109")
mei <- c("Bacteroidales"," Blautia", "Butyricicoccus", "Clostridiales", "Clostridiaceae",
" Clostridium", "Coprobacillus", "Coprococcus"," Erysipelothrichales", "Erysipelotrichi",
"EtOH8 (anaerobic bacterium – Peptococcaceae)", "Eubacterium", "Staphyloccaceae", "Staphyloccocus")
mon <- c("Actinomycetales"," Bifidobacteriales", "Caulobacterales"," Enterobacteriales",
" Erysipelotrichales"," Oceanospirillales", "Pseudomonadales";" Rhodobacterales", "Rhodospirillales",
mon <- c("Actinomycetales"," Bifidobacteriales", "Caulobacterales"," Enterobacteriales",
" Erysipelotrichales"," Oceanospirillales", "Pseudomonadales";" Rhodobacterales", "Rhodospirillales",
mei <- c("Bacteroidales"," Blautia", "Butyricicoccus", "Clostridiales", "Clostridiaceae",
" Clostridium", "Coprobacillus", "Coprococcus"," Erysipelothrichales", "Erysipelotrichi",
"EtOH8 (anaerobic bacterium – Peptococcaceae)", "Eubacterium", "Staphyloccaceae", "Staphyloccocus")
mon <- c("Actinomycetales"," Bifidobacteriales", "Caulobacterales"," Enterobacteriales",
" Erysipelotrichales"," Oceanospirillales", "Pseudomonadales"," Rhodobacterales", "Rhodospirillales",
"Xanthomonadales")
pourabedin <- c("Faecalibacterium","Lactobacillales", "Pseudomonas", "Pseudomonaceae", "Pseudomonadales",
"Lactobacillaceae", "Pediococcus", "Ruminococcaceae", "Salmonella", "Staphylococcus")
wang <- "Bacteroides"
selefse <- c(janetal,lietal,mei,mon,pourabedin,wang)
table(selefse)
nrow(selefse)
nrow(as.data.frame(selefse))
table(selefse)
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/DESEQ2/NB.R")
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/DESEQ2/NB.R")
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/DESEQ2/NB.R")
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/DESEQ2/NB.R", echo=TRUE)
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/DESEQ2/NB.R", echo=TRUE)
#We will convert our table to DESeqDataSet object
countData = round(as(abund_table, "matrix"), digits = 0)
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/DESEQ2/NB.R", echo=TRUE)
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/Multinomial_logistic_regression_metadata/multinom_c52.R", echo=TRUE)
debugSource("~/Dropbox/Gladys_Pangga_PhD/Analysis/Multinomial_logistic_regression_metadata/multinom_c52.R", echo=TRUE)
setwd("~/Dropbox/Gladys_Pangga_PhD/Analysis/DIABLO/Run_0.80cutoff")
source("~/Dropbox/Gladys_Pangga_PhD/Analysis/DIABLO/Run_0.80cutoff/DIABLO.R", echo=TRUE)
source("~/Dropbox/Gladys_Pangga_PhD/Analysis/DIABLO/Run_0.80cutoff/DIABLO.R", echo=TRUE)
load("~/Dropbox/Gladys_Pangga_PhD/Analysis/DIABLO/Centroids3_10_50_5_50_500_50/Step.11-DIABLO_DATA_Hypothesis1.RData")
data.diablo$loadings[[2]]
write.csv(data.diablo$loadings[[2]][abs(rowSums(data.diablo$loadings[[1]]))>0,],paste("Step.5-DIABLO_significant_Mtbs_",paste(levels(meta_table$Groups),collapse="_"),"_",label,".csv",sep=""))
setwd("~/Dropbox/Gladys_Pangga_PhD/Analysis/DIABLO")
write.csv(data.diablo$loadings[[2]][abs(rowSums(data.diablo$loadings[[1]]))>0,],paste("Step.5-DIABLO_significant_Mtbs_",paste(levels(meta_table$Groups),collapse="_"),"_",label,".csv",sep=""))
setwd("~/Dropbox/Gladys_Pangga_PhD/Analysis/sPLS-DA-Metabolites")
load("~/Dropbox/Gladys_Pangga_PhD/Analysis/sPLS-DA-Metabolites/PQN_new/Max3_2_200_2/Max3_2_200_2.RData")
abund_table.splsda
selected.features.comp = selectVar(abund_table.splsda, comp = i)$name
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
selected.features.comp = selectVar(abund_table.splsda, comp = i)$name
View(splsda_loadings)
View(splsda_loadings)
20+23+16
selected.features.comp1 = selectVar(abund_table.splsda, comp = 1)$name
selected.features.comp1 = selectVar(abund_table.splsda, comp = 1)$name
selected.features.comp2 = selectVar(abund_table.splsda, comp = 2)$name
selected.features.comp3 = selectVar(abund_table.splsda, comp = 3)$name
20+32+24
a3129
selected.features.comp1
setwd("~/Desktop/Others/Portfolio")
setwd("~/Desktop/Others/Portfolio/Metabolome_study")
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
## install BiocManager if not installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
## then install mixOmics
BiocManager::install("mixOmics")
setwd("~/Desktop/Others/Portfolio/Metabolome_study")
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS ###########################
#Load abundance table
abund_table<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS ###########################
#Load abundance table
df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
df[df$Treatment=="No","Treatment"] <- "T1"
df[df$Treatment=="Yes","Treatment"] <- "T2"
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS ###########################
#Load abundance table
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
#Load meta table
meta_df <- c(Treatment=c(rep("T1",10), rep("T2",10)))
#Load meta table
meta_df <- data.frame((Treatment=c(rep("T1",10), rep("T2",10))))
View(meta_df)
meta_df <- data.frame(("Treatment"=c(rep("T1",10), rep("T2",10))))
View(meta_df)
meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
View(meta_df)
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS ###########################
#Load abundance table
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
#Load meta table
meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
rownames(meta_df) <- paste0("MP", 1:20)
View(meta_df)
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS ###########################
#Load abundance table
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
# meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
# rownames(meta_df) <- paste0("MP", 1:20)
abund_df$Treatment <- as.factor(abund_df$Treatment)
abund_df
str(abund_df$Treatment)
View(abund_df)
abund_table.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df[-1]
df0 <- abund_df[-1]
View(df0)
abund_table.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_table.plsda.perf<-perf(abund_table.plsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.1-PLS-DA_performance.pdf")
plot(abund_table.plsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_table.plsda,comp=1:2,group=abund_df$Treatment,col=colours[1:length(levels(abund_df$Treatment))],ind.names=FALSE,ellipse=draw_ellipse,legend=TRUE,title="PLS-DA comp 1-2")
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_table.plsda,comp=1:2,group=abund_df$Treatment,col=colours[1:length(levels(abund_df$Treatment))],ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
levels(abund_df$Treatment
levels(abund_df$Treatment)
abund_df$Treatment
plotIndiv(abund_table.plsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
plotIndiv(abund_table.plsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_table.plsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
dev.off()
#Perform PLS-DA following steps from http://mixomics.org/mixmc/case-study-hmp-bodysites-repeated-measures/
#Step 1:
abund_df.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df.plsda.perf<-perf(abund_table.plsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
# Balanced Error Rate plot
pdf("Step.1-PLS-DA_performance.pdf")
plot(abund_df.plsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
#Step 2: Plot PLS-DA
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.plsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
dev.off()
abund_df.plsda.tune<-tune.splsda(X=abund_df[-1],
Y=abund_df$Treatment,
ncomp=2,
test.keepX =c(seq(20,200,2)),
validation="Mfold",
folds=5,
progressBar=TRUE,
dist="max.dist",
measure="overall",
nrepeat=10)
pdf("Step.3-sPLS-DA_tuning.pdf")
plot(abund_df.plsda.tune)
dev.off()
select.keepX = abund_df.plsda.tune$choice.keepX[1:2]
abund_df.splsda<-splsda(X=abund_df[-1],
Y=abund_df$Treatment, ncomp = 2,keepX = select.keepX)
#Step 4:
#Choose optimal number of variables to select on tuning_components comps:
select.keepX = abund_df.plsda.tune$choice.keepX[1:2]
#Now we run sPLS-DA multilevel analysis on the selected variables
abund_df.splsda<-splsda(X=abund_df[-1],
Y=abund_df$Treatment, ncomp = 2,keepX = select.keepX)
pdf("Step.4-sPLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.splsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="sPLS-DA comp 1-2")
dev.off()
#Step 5:
abund_df.splsda.perf<-perf(abund_df.splsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.5-sPLS-DA_performance.pdf")
plot(abund_table.splsda.perf, overlay = 'measure', sd = TRUE)
plot(abund_df.splsda.perf, overlay = 'measure', sd = TRUE)
#Step 5:
abund_df.splsda.perf<-perf(abund_df.splsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.5-sPLS-DA_performance.pdf")
plot(abund_df.splsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
pdf("Step.4-sPLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.splsda,comp=1:3,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="sPLS-DA comp 1-2")
#Step 6:
selectVar(abund_df.splsda, comp = 1)$value
selected.features.comp1 = selectVar(abund_table.splsda, comp = 1)$name
selected.features.comp1 = selectVar(abund_df.splsda, comp = 1)$name
selected.features.comp1 = selectVar(abund_df.splsda, comp = 1)$name
selected.features.comp2 = selectVar(abund_df.splsda, comp = 2)$name
selected.features.comp3 = selectVar(abund_df.splsda, comp = 3)$name
#Step 2: Plot PLS-DA
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.plsda,comp=1:3,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
#Perform PLS-DA following steps from http://mixomics.org/mixmc/case-study-hmp-bodysites-repeated-measures/
#Step 1:
abund_df.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df.plsda.perf<-perf(abund_table.plsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
#Perform PLS-DA following steps from http://mixomics.org/mixmc/case-study-hmp-bodysites-repeated-measures/
#Step 1:
abund_df.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df.plsda.perf<-perf(abund_table.plsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
# Balanced Error Rate plot
pdf("Step.1-PLS-DA_performance.pdf")
plot(abund_df.plsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
abund_df.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df.plsda.perf<-perf(abund_table.plsda,validation="Mfold",folds=5,progressBar=TRUE,auc=TRUE,nrepeat=10)
pdf("Step.1-PLS-DA_performance.pdf")
plot(abund_df.plsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
#Step 2: Plot PLS-DA
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.plsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
dev.off()
abund_df.plsda.tune<-tune.splsda(X=abund_df[-1],
Y=abund_df$Treatment,
ncomp=3,
test.keepX =c(seq(20,200,2)),
validation="Mfold",
folds=5,
progressBar=TRUE,
dist="max.dist",
measure="overall",
nrepeat=10)
pdf("Step.3-sPLS-DA_tuning.pdf")
plot(abund_df.plsda.tune)
dev.off()
select.keepX = abund_df.plsda.tune$choice.keepX[1:2]
abund_df.splsda<-splsda(X=abund_df[-1],
Y=abund_df$Treatment, ncomp = 2,keepX = select.keepX)
pdf("Step.4-sPLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.splsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="sPLS-DA comp 1-2")
dev.off()
abund_df.splsda.perf<-perf(abund_df.splsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.5-sPLS-DA_performance.pdf")
plot(abund_df.splsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
#Step 4:
#Choose optimal number of variables to select on tuning_components comps:
select.keepX = abund_df.plsda.tune$choice.keepX[1:2]
#Now we run sPLS-DA multilevel analysis on the selected variables
abund_df.splsda<-splsda(X=abund_df[-1],
Y=abund_df$Treatment, ncomp = 3,keepX = select.keepX)
pdf("Step.4-sPLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.splsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="sPLS-DA comp 1-2")
dev.off()
abund_df.splsda.perf<-perf(abund_df.splsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.5-sPLS-DA_performance.pdf")
plot(abund_df.splsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
#Step 5:
abund_df.splsda.perf<-perf(abund_df.splsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.5-sPLS-DA_performance.pdf")
plot(abund_df.splsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
selectVar(abund_df.splsda, comp = 1)$value
selected.features.comp1 = selectVar(abund_df.splsda, comp = 1)$name
selected.features.comp2 = selectVar(abund_df.splsda, comp = 2)$name
selected.features.comp3 = selectVar(abund_df.splsda, comp = 3)$name
#Step 7:
plotLoadings(abund_df.splsda,comp=1,contrib=loading_contrib,method=loading_method)
#Step 7:
plotLoadings(abund_df.splsda,comp=1,contrib="max",method=loading_method)
#Step 7:
plotLoadings(abund_df.splsda,comp=1,contrib="max",method="mean")
#Step 7:
pdf("Step.6-Plot_loadings.pdf")
plotLoadings(abund_df.splsda,comp=1,contrib="max",method="mean")
dev.off()
selected.features.comp1 = selectVar(abund_df.splsda, comp = 1)$name
selected.features.comp2 = selectVar(abund_df.splsda, comp = 2)$name
selected.features.comp3 = selectVar(abund_df.splsda, comp = 3)$name
#Step 7:
pdf("Step.6-Plot_loadings.pdf")
plotLoadings(abund_df.splsda,comp=1,contrib="max",method="mean")
dev.off()
#Step 8:
#A heatmap will also help understanding the selected features.
pdf("Step.8-sPLS-DA_heatmap.pdf",height=10,width=14)
cim(abund_df.splsda,margins=c(20,6))
dev.off()
#A heatmap will also help understanding the selected features.
pdf("Step.8-sPLS-DA_heatmap.pdf",height=10,width=14)
cim(abund_df.splsda,row.sideColors = c("red","blue"),margins=c(20,6))
cim(abund_df.splsda,row.sideColors = c(rep("#FFA8BB",10), rep("#5EF1F2",10)),margins=c(20,6))
pdf("Step.8-sPLS-DA_heatmap.pdf",height=10,width=14)
cim(abund_df.splsda,row.sideColors = c(rep("#FFA8BB",10), rep("#5EF1F2",10)),margins=c(20,6))
dev.off()
load("~/Dropbox/Gladys_Pangga_PhD/Analysis/sPLS-DA-Metabolites/PQN_new/Max3_2_200_2/Max3_2_200_2.RData")
load("~/Dropbox/Gladys_Pangga_PhD/Analysis/sPLS-DA-Metabolites/PQN_new/Max3_2_200_2/Max3_2_200_2.RData")
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
abund_df$Treatment <- as.factor(abund_df$Treatment)
# meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
# rownames(meta_df) <- paste0("MP", 1:20)
tuning_KeepX
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
abund_df$Treatment <- as.factor(abund_df$Treatment)
# meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
# rownames(meta_df) <- paste0("MP", 1:20)
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
abund_df$Treatment <- as.factor(abund_df$Treatment)
# meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
# rownames(meta_df) <- paste0("MP", 1:20)
View(abund_df)
#Perform PLS-DA following steps from http://mixomics.org/mixmc/case-study-hmp-bodysites-repeated-measures/
#Step 1:
abund_df.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df.plsda.perf<-perf(abund_table.plsda,validation="Mfold",folds=5,progressBar=TRUE,auc=TRUE,nrepeat=10)
# Balanced Error Rate plot
pdf("Step.1-PLS-DA_performance.pdf")
plot(abund_df.plsda.perf, overlay = 'measure', sd = TRUE)
#Sparse Projection to Latent Structure - Discriminant Analysis for Metabolites
library(mixOmics)
#PARAMETERS
abund_df<-read.csv("metabolite_abundance.csv",header=TRUE,row.names=1)
abund_df[abund_df$Treatment=="No","Treatment"] <- "T1"
abund_df[abund_df$Treatment=="Yes","Treatment"] <- "T2"
abund_df$Treatment <- as.factor(abund_df$Treatment)
# meta_df <- data.frame(c(rep("T1",10), rep("T2",10)))
# rownames(meta_df) <- paste0("MP", 1:20)
#Perform PLS-DA following steps from http://mixomics.org/mixmc/case-study-hmp-bodysites-repeated-measures/
#Step 1:
abund_df.plsda<-plsda(X=abund_df[-1], Y=abund_df$Treatment, ncomp = 10)
abund_df.plsda.perf<-perf(abund_df.plsda,validation="Mfold",folds=5,progressBar=TRUE,auc=TRUE,nrepeat=10)
# Balanced Error Rate plot
pdf("Step.1-PLS-DA_performance.pdf")
plot(abund_df.plsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
#Step 2: Plot PLS-DA
pdf("Step.2-PLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.plsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="PLS-DA comp 1-2")
dev.off()
#Step 3: tuning PLS-DA
abund_df.plsda.tune<-tune.splsda(X=abund_df[-1],
Y=abund_df$Treatment,
ncomp=3,
test.keepX =c(seq(20,200,2)),
validation="Mfold",
folds=5,
progressBar=TRUE,
dist="max.dist",
measure="overall",
nrepeat=10)
pdf("Step.3-sPLS-DA_tuning.pdf")
plot(abund_df.plsda.tune)
dev.off()
#Choose optimal number of variables to select on tuning_components comps:
select.keepX = abund_df.plsda.tune$choice.keepX[1:3]
#Now we run sPLS-DA multilevel analysis on the selected variables
abund_df.splsda<-splsda(X=abund_df[-1],
Y=abund_df$Treatment, ncomp = 3,keepX = select.keepX)
pdf("Step.4-sPLS-DA_plotIndiv.pdf")
plotIndiv(abund_df.splsda,comp=1:2,group=abund_df$Treatment,ind.names=FALSE,ellipse=TRUE,legend=TRUE,title="sPLS-DA comp 1-2")
dev.off()
#Step 5:
abund_df.splsda.perf<-perf(abund_df.splsda,validation="Mfold",folds=5,progressBar=FALSE,auc=TRUE,nrepeat=10)
pdf("Step.5-sPLS-DA_performance.pdf")
plot(abund_df.splsda.perf, overlay = 'measure', sd = TRUE)
dev.off()
selectVar(abund_df.splsda, comp = 1)$value
selected.features.comp1 = selectVar(abund_df.splsda, comp = 1)$name
selected.features.comp2 = selectVar(abund_df.splsda, comp = 2)$name
selected.features.comp3 = selectVar(abund_df.splsda, comp = 3)$name
#Step 7:
pdf("Step.6-Plot_loadings.pdf")
plotLoadings(abund_df.splsda,comp=1,contrib="max",method="mean")
dev.off()
#Step 8:
#A heatmap will also help understanding the selected features.
pdf("Step.8-sPLS-DA_heatmap.pdf",height=10,width=14)
cim(abund_df.splsda,row.sideColors = c(rep("#FFA8BB",10), rep("#5EF1F2",10)),margins=c(20,6))
dev.off()
